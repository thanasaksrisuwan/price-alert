/**
 * ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÅ‡∏™‡∏î‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
 */

const logger = require('../utils/logger').createModuleLogger('PortfolioController');
const PortfolioModel = require('../models/portfolio');
const UserModel = require('../models/user');
const PriceService = require('../services/priceService');
const { isValidCryptoSymbol, isValidNumber } = require('../utils/validators');

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /portfolio - ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
 * @param {object} ctx - Telegraf context
 */
async function handleShowPortfolio(ctx) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const telegramId = ctx.from.id;
    const user = await UserModel.findUserByTelegramId(telegramId);
    
    if (!user) {
      return ctx.reply('‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start');
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const portfolioItems = await PortfolioModel.getPortfolioByUser(user.id);
    
    if (!portfolioItems || portfolioItems.length === 0) {
      return ctx.reply(
        '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠\n\n' +
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /add <symbol> <quantity> <buy_price>\n' +
        '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /add BTC 0.5 45000'
      );
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
    const loadingMessage = await ctx.reply('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    const portfolioData = await Promise.all(
      portfolioItems.map(async (item) => {
        const priceData = await PriceService.getPrice(item.symbol, user.default_currency);
        
        if (!priceData) {
          return {
            ...item,
            currentPrice: 0,
            currentValue: 0,
            profitLoss: 0,
            profitLossPercentage: 0,
            priceAvailable: false
          };
        }
        
        const currentPrice = priceData.price;
        const currentValue = currentPrice * item.quantity;
        const buyValue = item.buy_price * item.quantity;
        const profitLoss = currentValue - buyValue;
        const profitLossPercentage = (profitLoss / buyValue) * 100;
        
        return {
          ...item,
          currentPrice,
          currentValue,
          profitLoss,
          profitLossPercentage,
          priceAvailable: true
        };
      })
    );
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°
    const totalValue = portfolioData.reduce((sum, item) => sum + item.currentValue, 0);
    const totalInvestment = portfolioData.reduce((sum, item) => sum + (item.buy_price * item.quantity), 0);
    const totalProfitLoss = totalValue - totalInvestment;
    const totalProfitLossPercentage = (totalProfitLoss / totalInvestment) * 100;
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
    const message = formatPortfolioMessage(
      portfolioData,
      user.default_currency,
      totalValue,
      totalInvestment,
      totalProfitLoss,
      totalProfitLossPercentage
    );
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
    await ctx.telegram.editMessageText(
      ctx.chat.id, 
      loadingMessage.message_id, 
      null, 
      message,
      { parse_mode: 'Markdown' }
    );
    
    logger.info(`Portfolio viewed by user ${user.id}`);
  } catch (error) {
    logger.error('Error in handleShowPortfolio:', error);
    ctx.reply('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /add <symbol> <quantity> <buy_price> - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
 * @param {object} ctx - Telegraf context
 */
async function handleAddToPortfolio(ctx) {
  try {
    // ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const params = ctx.message.text.split(' ').filter(Boolean);
    
    if (params.length < 4) {
      return ctx.reply(
        '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n' +
        '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: /add <symbol> <quantity> <buy_price>\n' +
        '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /add BTC 0.5 45000'
      );
    }
    
    const symbol = params[1].toUpperCase();
    const quantity = parseFloat(params[2]);
    const buyPrice = parseFloat(params[3]);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!isValidCryptoSymbol(symbol)) {
      return ctx.reply(`‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${symbol}`);
    }
    
    if (!isValidNumber(quantity) || quantity <= 0) {
      return ctx.reply('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0');
    }
    
    if (!isValidNumber(buyPrice) || buyPrice <= 0) {
      return ctx.reply('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0');
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const telegramId = ctx.from.id;
    const user = await UserModel.findUserByTelegramId(telegramId);
    
    if (!user) {
      return ctx.reply('‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const priceData = await PriceService.getPrice(symbol, user.default_currency);
    
    if (!priceData) {
      return ctx.reply(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ${symbol} ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
    const existingItem = await PortfolioModel.getPortfolioItemBySymbol(user.id, symbol);
    
    let resultItem;
    if (existingItem) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏´‡∏°‡πà
      const newQuantity = existingItem.quantity + quantity;
      const newTotalCost = (existingItem.quantity * existingItem.buy_price) + (quantity * buyPrice);
      const newAvgPrice = newTotalCost / newQuantity;
      
      resultItem = await PortfolioModel.addOrUpdatePortfolioItem({
        userId: user.id,
        symbol,
        quantity: newQuantity,
        buyPrice: newAvgPrice
      });
      
      await ctx.reply(
        `‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ${symbol} ‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n` +
        `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà: ${newQuantity}\n` +
        `‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${newAvgPrice.toFixed(2)} ${user.default_currency}\n\n` +
        `‡∏î‡∏π‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /portfolio`
      );
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      resultItem = await PortfolioModel.addOrUpdatePortfolioItem({
        userId: user.id,
        symbol,
        quantity,
        buyPrice
      });
      
      await ctx.reply(
        `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ${symbol} ‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n` +
        `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${quantity}\n` +
        `‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠: ${buyPrice} ${user.default_currency}\n\n` +
        `‡∏î‡∏π‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /portfolio`
      );
    }
    
    logger.info(`Portfolio updated for user ${user.id}: added/updated ${symbol}`);
  } catch (error) {
    logger.error('Error in handleAddToPortfolio:', error);
    ctx.reply('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
 * @param {Array} portfolioData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠
 * @param {string} currency - ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 * @param {number} totalValue - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°
 * @param {number} totalInvestment - ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°
 * @param {number} totalProfitLoss - ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°
 * @param {number} totalProfitLossPercentage - ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°
 * @returns {string} - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */
function formatPortfolioMessage(portfolioData, currency, totalValue, totalInvestment, totalProfitLoss, totalProfitLossPercentage) {
  const currencySymbol = getCurrencySymbol(currency);
  const isProfitable = totalProfitLoss >= 0;
  const profitIndicator = isProfitable ? 'üìà' : 'üìâ';
  
  // ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  let message = `üíº *‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì* üíº\n\n`;
  
  // ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°
  message += `*‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°:* ${currencySymbol}${totalValue.toFixed(2)}\n`;
  message += `*‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô:* ${currencySymbol}${totalInvestment.toFixed(2)}\n`;
  message += `*‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô:* ${profitIndicator} ${totalProfitLoss >= 0 ? '+' : ''}${currencySymbol}${totalProfitLoss.toFixed(2)} (${totalProfitLossPercentage.toFixed(2)}%)\n\n`;
  
  message += `*‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç:*\n`;
  
  // ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
  portfolioData.forEach((item, index) => {
    const itemProfitIndicator = item.profitLoss >= 0 ? 'üü¢' : 'üî¥';
    
    message += `\n${itemProfitIndicator} *${item.symbol}*\n`;
    message += `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${item.quantity}\n`;
    
    if (item.priceAvailable) {
      message += `‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currencySymbol}${item.currentPrice.toFixed(2)}\n`;
      message += `‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: ${currencySymbol}${item.currentValue.toFixed(2)}\n`;
      message += `‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠: ${currencySymbol}${item.buy_price.toFixed(2)}\n`;
      message += `‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: ${item.profitLoss >= 0 ? '+' : ''}${currencySymbol}${item.profitLoss.toFixed(2)} (${item.profitLossPercentage.toFixed(2)}%)\n`;
    } else {
      message += `‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ\n`;
      message += `‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠: ${currencySymbol}${item.buy_price.toFixed(2)}\n`;
    }
  });
  
  // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  message += `\n\n‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç: /add <symbol> <quantity> <buy_price>`;
  
  return message;
}

/**
 * ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 * @param {string} currency - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 * @returns {string} - ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 */
function getCurrencySymbol(currency) {
  const symbols = {
    USD: '$',
    EUR: '‚Ç¨',
    GBP: '¬£',
    JPY: '¬•',
    THB: '‡∏ø',
    BTC: '‚Çø'
  };
  
  return symbols[currency] || `${currency} `;
}

module.exports = {
  handleShowPortfolio,
  handleAddToPortfolio
};
