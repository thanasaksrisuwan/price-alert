/**
 * ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï
 */

const logger = require('../utils/logger').createModuleLogger('PriceController');
const { isValidCryptoSymbol } = require('../utils/validators');
const PriceService = require('../services/priceService');
const EnhancedPriceService = require('../services/enhancedPriceService');
const UserModel = require('../models/user');

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /price <symbol> - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
 * @param {object} ctx - Telegraf context
 */
async function handlePriceCommand(ctx) {
  try {
    // ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const params = ctx.message.text.split(' ').filter(Boolean);
    
    if (params.length < 2) {
      return ctx.reply('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‡πÄ‡∏ä‡πà‡∏ô /price BTC');
    }
    
    const symbol = params[1].toUpperCase();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
    if (!isValidCryptoSymbol(symbol)) {
      return ctx.reply(`‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${symbol}`);
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    const telegramId = ctx.from.id;
    const user = await UserModel.findUserByTelegramId(telegramId);
    const currency = user?.default_currency || 'THB';
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const loadingMessage = await ctx.reply(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤ ${symbol}...`);
      
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
      let priceData = await PriceService.getPrice(symbol, currency);
      
      if (!priceData) {
        await ctx.telegram.editMessageText(
          ctx.chat.id, 
          loadingMessage.message_id, 
          null, 
          `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${symbol}`
        );
        return;
      }
      
      // ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• market cap ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      priceData = await EnhancedPriceService.enhancePriceData(priceData, symbol, currency);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      const message = formatPriceMessage(priceData, symbol, currency);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
      await ctx.telegram.editMessageText(
        ctx.chat.id, 
        loadingMessage.message_id, 
        null, 
        message,
        { parse_mode: 'Markdown', disable_web_page_preview: true }
      );
      
      logger.info(`Price data fetched for ${symbol} by user ${telegramId}`);
    } catch (error) {
      logger.error(`Error fetching price data for ${symbol}:`, error);
      
      ctx.reply('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
    }
  } catch (error) {
    logger.error('Error in handlePriceCommand:', error);
    ctx.reply('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
 * @param {object} priceData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
 * @param {string} symbol - ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
 * @param {string} currency - ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
 * @returns {string} - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */
function formatPriceMessage(priceData, symbol, currency) {
  // ‡πÉ‡∏ä‡πâ destructuring ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
  const {
    price = 0,
    priceChange24h = 0,
    priceChangePercentage24h = 0,
    marketCap = 0,
    volume24h = 0,
    high24h = 0,
    low24h = 0,
    lastUpdated = new Date(),
    name = symbol,
    imageUrl = null
  } = priceData || {};
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
  const trendIndicator = priceChangePercentage24h >= 0 ? 'üü¢' : 'üî¥';
  const changePrefix = priceChangePercentage24h >= 0 ? '+' : '';
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ - ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper
  const formattedValues = {
    price: formatCurrency(price, currency),
    marketCap: formatCurrency(marketCap, currency, true),
    volume: formatCurrency(volume24h, currency, true),
    high: formatCurrency(high24h, currency),
    low: formatCurrency(low24h, currency),
    change: `${changePrefix}${priceChangePercentage24h.toFixed(2)}%`,
    priceChange: formatCurrency(priceChange24h, currency),
    dateTime: formatDateTime(lastUpdated)
  };
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° - ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô template literals ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  return `
${trendIndicator} *${name} (${symbol})* ${trendIndicator}

üí∞ *‡∏£‡∏≤‡∏Ñ‡∏≤:* ${formattedValues.price}
üìà *‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (24‡∏ä‡∏°):* ${formattedValues.change} (${formattedValues.priceChange})
„ÄΩÔ∏è *‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î/‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (24‡∏ä‡∏°):* ${formattedValues.high} / ${formattedValues.low}
üíπ *‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î:* ${formattedValues.marketCap}
üìä *‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ (24‡∏ä‡∏°):* ${formattedValues.volume}
üïí *‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠:* ${formattedValues.dateTime}

*‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤:*
/alert ${symbol} above [‡∏£‡∏≤‡∏Ñ‡∏≤] - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
/alert ${symbol} below [‡∏£‡∏≤‡∏Ñ‡∏≤] - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤
`;
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
 * @param {number} value - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
 * @param {string} currency - ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 * @param {boolean} [compact=false] - ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @returns {string} - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */
function formatCurrency(value, currency, compact = false) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ null ‡∏´‡∏£‡∏∑‡∏≠ undefined
  if (value === null || value === undefined) {
    logger.warn(`Attempted to format undefined or null value as currency: ${currency}`);
    return `${getCurrencySymbol(currency)}0.00`;
  }
  
  const currencySymbol = getCurrencySymbol(currency);
  const isThaiCurrency = currency === 'THB';
  
  // Handle compact formatting first
  if (compact) {
    let formattedValue;
    let suffix = '';
    
    if (value >= 1e9) {
      formattedValue = (value / 1e9).toFixed(2);
      suffix = 'B';
    } else if (value >= 1e6) {
      formattedValue = (value / 1e6).toFixed(2);
      suffix = 'M';
    } else if (value >= 1e3) {
      formattedValue = (value / 1e3).toFixed(2);
      suffix = 'K';
    } else {
      // If not large enough for compact format, use standard format
      return formatCurrency(value, currency, false);
    }
    
    // Apply correct symbol position based on currency
    return isThaiCurrency 
      ? `${formattedValue}${suffix} ${currencySymbol}`
      : `${currencySymbol}${formattedValue}${suffix}`;
  }
  
  // Standard formatting (non-compact)
  const locale = isThaiCurrency ? 'th-TH' : undefined;
  const decimalPlaces = value < 1 ? 8 : 2;
  
  const formattedNumber = value.toLocaleString(locale, {
    minimumFractionDigits: decimalPlaces,
    maximumFractionDigits: decimalPlaces
  });
  
  // Apply correct symbol position based on currency
  return isThaiCurrency
    ? `${formattedNumber} ${currencySymbol}`
    : `${currencySymbol}${formattedNumber}`;
}

/**
 * ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ memoization ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
 * @param {string} currency - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 * @returns {string} - ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 */
const getCurrencySymbol = (function() {
  // Create a cache object inside the closure
  const symbolCache = {};
  
  // Define the currency symbols mapping
  const symbols = {
    USD: '$',
    EUR: '‚Ç¨',
    GBP: '¬£',
    JPY: '¬•',
    THB: '‡∏ø',
    BTC: '‚Çø'
  };
  
  // Return the actual function with memoization
  return function(currency) {
    // Return from cache if the symbol was already requested before
    if (currency in symbolCache) {
      return symbolCache[currency];
    }
    
    // Calculate and cache the result
    const symbol = symbols[currency] || `${currency} `;
    symbolCache[currency] = symbol;
    
    return symbol;
  };
})();

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
 * @param {string|Date} dateTime - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
 * @param {string} [locale=undefined] - ‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏©‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô th-TH ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ó‡∏¢)
 * @returns {string} - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */
function formatDateTime(dateTime, locale) {
  if (!dateTime) {
    return '(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)';
  }
  
  try {
    const date = new Date(dateTime);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (isNaN(date.getTime())) {
      return '(‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)';
    }
    
    // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    return date.toLocaleString(locale, {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  } catch (error) {
    logger.error('Error formatting date:', error);
    return '(‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ)';
  }
}

module.exports = {
  handlePriceCommand,
  // Export for testing
  __testExports: {
    formatCurrency,
    getCurrencySymbol,
    formatPriceMessage,
    formatDateTime
  }
};
