/**
 * ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï
 */

const logger = require('../utils/logger').createModuleLogger('PriceController');
const { isValidCryptoSymbol } = require('../utils/validators');
const PriceService = require('../services/priceService');
const UserModel = require('../models/user');

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /price <symbol> - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
 * @param {object} ctx - Telegraf context
 */
async function handlePriceCommand(ctx) {
  try {
    // ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const params = ctx.message.text.split(' ').filter(Boolean);
    
    if (params.length < 2) {
      return ctx.reply('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‡πÄ‡∏ä‡πà‡∏ô /price BTC');
    }
    
    const symbol = params[1].toUpperCase();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
    if (!isValidCryptoSymbol(symbol)) {
      return ctx.reply(`‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${symbol}`);
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    const telegramId = ctx.from.id;
    const user = await UserModel.findUserByTelegramId(telegramId);
    const currency = user?.default_currency || 'USD';
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const loadingMessage = await ctx.reply(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤ ${symbol}...`);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
    const priceData = await PriceService.getPrice(symbol, currency);
    
    if (!priceData) {
      await ctx.telegram.editMessageText(
        ctx.chat.id, 
        loadingMessage.message_id, 
        null, 
        `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${symbol}`
      );
      return;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const message = formatPriceMessage(priceData, symbol, currency);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
    await ctx.telegram.editMessageText(
      ctx.chat.id, 
      loadingMessage.message_id, 
      null, 
      message,
      { parse_mode: 'Markdown', disable_web_page_preview: true }
    );
    
    logger.info(`Price data fetched for ${symbol} by user ${telegramId}`);
  } catch (error) {
    logger.error('Error in handlePriceCommand:', error);
    ctx.reply('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
 * @param {object} priceData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
 * @param {string} symbol - ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
 * @param {string} currency - ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
 * @returns {string} - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */
function formatPriceMessage(priceData, symbol, currency) {
  const {
    price,
    priceChange24h,
    priceChangePercentage24h,
    marketCap,
    volume24h,
    high24h,
    low24h,
    lastUpdated,
    name,
    imageUrl
  } = priceData;
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
  const trendIndicator = priceChangePercentage24h >= 0 ? 'üü¢' : 'üî¥';
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
  const formattedPrice = formatCurrency(price, currency);
  const formattedMarketCap = formatCurrency(marketCap, currency, true);
  const formattedVolume = formatCurrency(volume24h, currency, true);
  const formattedHigh = formatCurrency(high24h, currency);
  const formattedLow = formatCurrency(low24h, currency);
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
  const changePrefix = priceChangePercentage24h >= 0 ? '+' : '';
  const formattedChange = `${changePrefix}${priceChangePercentage24h.toFixed(2)}%`;
  const formattedPriceChange = formatCurrency(priceChange24h, currency);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  return `
${trendIndicator} *${name} (${symbol})* ${trendIndicator}

üí∞ *‡∏£‡∏≤‡∏Ñ‡∏≤:* ${formattedPrice}
üìà *‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (24‡∏ä‡∏°):* ${formattedChange} (${formattedPriceChange})
„ÄΩÔ∏è *‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î/‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (24‡∏ä‡∏°):* ${formattedHigh} / ${formattedLow}
üíπ *‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î:* ${formattedMarketCap}
üìä *‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ (24‡∏ä‡∏°):* ${formattedVolume}
üïí *‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠:* ${formatDateTime(lastUpdated)}

*‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤:*
/alert ${symbol} above [‡∏£‡∏≤‡∏Ñ‡∏≤] - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
/alert ${symbol} below [‡∏£‡∏≤‡∏Ñ‡∏≤] - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤
`;
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
 * @param {number} value - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
 * @param {string} currency - ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 * @param {boolean} [compact=false] - ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @returns {string} - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */
function formatCurrency(value, currency, compact = false) {
  const currencySymbol = getCurrencySymbol(currency);
  
  if (compact && value >= 1e9) {
    return `${currencySymbol}${(value / 1e9).toFixed(2)}B`;
  } else if (compact && value >= 1e6) {
    return `${currencySymbol}${(value / 1e6).toFixed(2)}M`;
  } else if (compact && value >= 1e3) {
    return `${currencySymbol}${(value / 1e3).toFixed(2)}K`;
  }
  
  return `${currencySymbol}${value.toLocaleString(undefined, {
    minimumFractionDigits: 2,
    maximumFractionDigits: value < 1 ? 8 : 2
  })}`;
}

/**
 * ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 * @param {string} currency - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 * @returns {string} - ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
 */
function getCurrencySymbol(currency) {
  const symbols = {
    USD: '$',
    EUR: '‚Ç¨',
    GBP: '¬£',
    JPY: '¬•',
    THB: '‡∏ø',
    BTC: '‚Çø'
  };
  
  return symbols[currency] || `${currency} `;
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
 * @param {string|Date} dateTime - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
 * @returns {string} - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */
function formatDateTime(dateTime) {
  const date = new Date(dateTime);
  return date.toLocaleString();
}

module.exports = {
  handlePriceCommand
};
